#! /usr/bin/python -Es
# Copyright (C) 2017 Red Hat
# AUTHOR: Douglas Graeme Brown <dgbrown@redhat.com>
# see file 'COPYING' for use and warranty information
#
# seapply is a tool for applying differential changes to SELinux
#
#    This program is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License as
#    published by the Free Software Foundation; either version 2 of
#    the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
#                                        02111-1307  USA
#
#

import sys
import seobject
import json

PROGNAME = "policycoreutils"
SUPPORTED = ('seluserRecords', 'loginRecords')

def parseConfig(jsoncontent):
    try:
        config = json.loads(jsoncontent)
    except:
        print("Invalid JSON")
        sys.exit(3)
    checkConfig(config)
    return config

def readFile(filepath):
    with open(filepath, 'r') as fileobject:
        filecontent = fileobject.read()
    return filecontent

def covertDictTuplesToList(thedictionary):
    for thetuple in thedictionary:
        thedictionary[thetuple] = list(thedictionary[thetuple])
    return thedictionary

def getRunningConfig():
    theobject = seobject.seluserRecords()
    usermaps = theobject.get_all()
    theobject = seobject.loginRecords()
    loginmaps = theobject.get_all()
    return {'seluserRecords': covertDictTuplesToList(usermaps), 'loginRecords': covertDictTuplesToList(loginmaps)}

def checkConfig(config):
    error = False
    for key in config:
        if key not in SUPPORTED:
            error = True
            print("Unsupported setype " + key + " found!")

            if error == True:
                sys.exit(1)

def usage():
    print("\nUsage: seapply {export|dryrun|apply} [filename]\n\
seapply applies differential SELinux configuation changes to a host\n")

def main():

    try:

        if sys.argv[1] == 'apply' or sys.argv[1] == 'dryrun':

            stdin = str()

            # if there's something in stdin
            if not sys.stdin.isatty():
                for line in sys.stdin:
                    stdin += line
                providedconfig = parseConfig(stdin)

            # otherwise read from file
            else:
                filecontent = readFile(sys.argv[2])
                providedconfig = parseConfig(filecontent)

            runningconfig = getRunningConfig()

            for setype in SUPPORTED:

                if setype == 'seluserRecords':

                    theobject = seobject.seluserRecords()

                elif setype == 'loginRecords':

                    theobject = seobject.loginRecords()

                # compare configurations for the setype
                for key in set(list(runningconfig[setype].keys()) + list(providedconfig[setype].keys())):

                    # if the configuration is expected
                    if key in runningconfig[setype].keys() and key in providedconfig[setype].keys():
                        
                        # but the values of the configuration are different
                        if runningconfig[setype][key] != providedconfig[setype][key]:

                            print("change=\"modify\" setype=\"" + setype + "\" name=\"" + key + "\" value=\"" + str(providedconfig[setype][key]) + "\"")
                            if sys.argv[1] == 'apply':

                                if setype == 'seluserRecords':

                                    # change the configuration so it matches
                                    theobject.modify(str(key), roles=str(providedconfig[setype][key][3]).split(), selevel=str(providedconfig[setype][key][1]), serange=str(providedconfig[setype][key][2]), prefix=str(providedconfig[setype][key][0]))

                                elif setype == 'loginRecords':

                                    theobject.modify(str(key), sename=str(providedconfig[setype][key][0]), serange=str(providedconfig[setype][key][1]))

                    # if the configuration isn't expected
                    elif key in runningconfig[setype].keys() and key not in providedconfig[setype].keys():

                        print("change=\"delete\" setype=\"" + setype + "\" name=\"" + key + "\" value=\"" + str(runningconfig[setype][key]) + "\"")
                        if sys.argv[1] == 'apply':

                            # remove the configuration
                            theobject.delete(key)

                    # if the configuration should exist but doesn't
                    elif key not in runningconfig[setype].keys() and key in providedconfig[setype].keys():

                        print("change=\"add\" setype=\"" + setype + "\" name=\"" + key + "\" value=\"" + str(providedconfig[setype][key]) + "\"")

                        if sys.argv[1] == 'apply':

                            if setype == 'seluserRecords':

                                # add seuser configuration
                                theobject.add(str(key), roles=str(providedconfig[setype][key][3]).split(), selevel=str(providedconfig[setype][key][1]), serange=str(providedconfig[setype][key][2]), prefix=str(providedconfig[setype][key][0]))

                            elif setype == 'loginRecords':

                                # add login configuration
                                theobject.add(str(key), sename=str(providedconfig[setype][key][0]), serange=str(providedconfig[setype][key][1]))

                    else:

                        print("Something went wrong")
                        sys.exit(2)

        elif sys.argv[1] == 'export':

            # if a path to an export file was provided
            try:
                if sys.argv[2]:

                    content_file = open(sys.argv[2], 'w+')
                    content_file.write(json.dumps(getRunningConfig()) + '\n')
                    content_file.close()

            # if no path to an export file was provided
            except IndexError:

                # print to stdout
                print(json.dumps(getRunningConfig()))

        else:

            usage()

    except IndexError:

        usage()

main()
